<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--客户映射 指定到dao接口 -->
<mapper namespace="com.deepexi.trade.mapper.TcOrderPayMapper">
    <sql id="Base_Column_List">
      id,      created_at,      created_by,      updated_at,      updated_by,      order_id,      order_status,
            trans_no,      pay_type,      pay_time,      version,      dr,      tenant_code ,pay_center_trans_no   </sql>
    <select id="findList" resultType="com.deepexi.trade.domain.eo.TcOrderPay">
        SELECT
        <include refid="Base_Column_List"/>
        FROM tc_order_pay WHERE dr=0
        <if test="eo.transNo != null and eo.transNo != ''">
            AND trans_no = #{eo.transNo}
        </if>
        <if test="eo.orderId != null and eo.orderId != ''">
            AND order_id = #{eo.orderId}
        </if>
        <if test="eo.orderStatus != null">
            AND order_status = #{eo.orderStatus}
        </if>
        ORDER BY created_at DESC
    </select>
    <insert id="batchInsert">
        INSERT INTO tc_order_pay
        ( id, created_at, created_by, updated_at, updated_by, order_id, order_status, trans_no, pay_type, pay_time,
        version, dr, tenant_code)
        VALUES
        <foreach collection="eo" index="index" item="value" separator=",">
            ( #{value.id}, #{value.createdAt}, #{value.createdBy}, #{value.updatedAt}, #{value.updatedBy},
            #{value.orderId}, #{value.orderStatus}, #{value.transNo}, #{value.payType}, #{value.payTime},
            #{value.version}, #{value.dr}, #{value.tenantCode})
        </foreach>
    </insert>
    <update id="batchUpdate">
        INSERT INTO tc_order_pay
        ( id, created_at, created_by, updated_at, updated_by, order_id, order_status, trans_no, pay_type, pay_time,
        version, dr, tenant_code)
        VALUES
        <foreach collection="eo" index="index" item="value" separator=",">
            ( #{value.id}, #{value.createdAt}, #{value.createdBy}, #{value.updatedAt}, #{value.updatedBy},
            #{value.orderId}, #{value.orderStatus}, #{value.transNo}, #{value.payType}, #{value.payTime},
            #{value.version}, #{value.dr}, #{value.tenantCode})
        </foreach>
        ON DUPLICATE KEY UPDATE
        id=values(id), created_at=values(created_at), created_by=values(created_by), updated_at=values(updated_at),
        updated_by=values(updated_by), order_id=values(order_id), order_status=values(order_status),
        trans_no=values(trans_no), pay_type=values(pay_type), pay_time=values(pay_time), version=values(version),
        dr=values(dr), tenant_code=values(tenant_code)
    </update>
    <update id="deleteByIds">
        UPDATE tc_order_pay set dr=1 where id in
        <foreach collection="pks" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>